package com.example.demo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.demo.entity.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, String> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Gender = new Property(4, int.class, "gender", false, "GENDER");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Department = new Property(6, String.class, "department", false, "DEPARTMENT");
        public final static Property Major = new Property(7, String.class, "major", false, "MAJOR");
        public final static Property StudentClass = new Property(8, int.class, "studentClass", false, "STUDENT_CLASS");
    }

    private DaoSession daoSession;

    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"GENDER\" INTEGER NOT NULL ," + // 4: gender
                "\"PASSWORD\" TEXT NOT NULL ," + // 5: password
                "\"DEPARTMENT\" TEXT," + // 6: department
                "\"MAJOR\" TEXT," + // 7: major
                "\"STUDENT_CLASS\" INTEGER NOT NULL );"); // 8: studentClass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getGender());
        stmt.bindString(6, entity.getPassword());
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(8, major);
        }
        stmt.bindLong(9, entity.getStudentClass());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getGender());
        stmt.bindString(6, entity.getPassword());
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(8, major);
        }
        stmt.bindLong(9, entity.getStudentClass());
    }

    @Override
    protected final void attachEntity(Student entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.getInt(offset + 4), // gender
            cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // department
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // major
            cursor.getInt(offset + 8) // studentClass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.getInt(offset + 4));
        entity.setPassword(cursor.getString(offset + 5));
        entity.setDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMajor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStudentClass(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Student entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
