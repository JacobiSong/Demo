package com.example.demo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.demo.TimeConverter;
import java.time.LocalDateTime;

import com.example.demo.entity.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Integer> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property SenderId = new Property(1, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(2, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
    }

    private final TimeConverter timeConverter = new TimeConverter();

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SENDER_ID\" TEXT NOT NULL ," + // 1: senderId
                "\"RECEIVER_ID\" TEXT NOT NULL ," + // 2: receiverId
                "\"CONTENT\" TEXT NOT NULL ," + // 3: content
                "\"TIME\" INTEGER NOT NULL );"); // 4: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getSenderId());
        stmt.bindString(3, entity.getReceiverId());
        stmt.bindString(4, entity.getContent());
        stmt.bindLong(5, timeConverter.convertToDatabaseValue(entity.getTime()));
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getSenderId());
        stmt.bindString(3, entity.getReceiverId());
        stmt.bindString(4, entity.getContent());
        stmt.bindLong(5, timeConverter.convertToDatabaseValue(entity.getTime()));
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // senderId
            cursor.getString(offset + 2), // receiverId
            cursor.getString(offset + 3), // content
            timeConverter.convertToEntityProperty(cursor.getLong(offset + 4)) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setSenderId(cursor.getString(offset + 1));
        entity.setReceiverId(cursor.getString(offset + 2));
        entity.setContent(cursor.getString(offset + 3));
        entity.setTime(timeConverter.convertToEntityProperty(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
