package com.example.demo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.demo.entity.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, String> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Classroom = new Property(2, String.class, "classroom", false, "CLASSROOM");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property HasGroup = new Property(4, boolean.class, "hasGroup", false, "HAS_GROUP");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property Semester = new Property(6, int.class, "semester", false, "SEMESTER");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"CLASSROOM\" TEXT NOT NULL ," + // 2: classroom
                "\"TIME\" TEXT NOT NULL ," + // 3: time
                "\"HAS_GROUP\" INTEGER NOT NULL ," + // 4: hasGroup
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"SEMESTER\" INTEGER NOT NULL );"); // 6: semester
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getClassroom());
        stmt.bindString(4, entity.getTime());
        stmt.bindLong(5, entity.getHasGroup() ? 1L: 0L);
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getSemester());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getClassroom());
        stmt.bindString(4, entity.getTime());
        stmt.bindLong(5, entity.getHasGroup() ? 1L: 0L);
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getSemester());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // classroom
            cursor.getString(offset + 3), // time
            cursor.getShort(offset + 4) != 0, // hasGroup
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.getInt(offset + 6) // semester
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setClassroom(cursor.getString(offset + 2));
        entity.setTime(cursor.getString(offset + 3));
        entity.setHasGroup(cursor.getShort(offset + 4) != 0);
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSemester(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Course entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
